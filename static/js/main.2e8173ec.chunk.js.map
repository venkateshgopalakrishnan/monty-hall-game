{"version":3,"sources":["Components/Door/Door.js","Components/GamePage/GamePage.js","App.js","serviceWorker.js","index.js"],"names":["Door","state","id","_this","props","prize","colourSelectedDoor","this","selectedDoor","setState","_this2","react_default","a","createElement","className","onClick","selectDoor","React","Component","GamePage","shuffleArray","temp","index","arr","arguments","length","undefined","ctr","Math","floor","random","isPlayClicked","doors","prizes","userSelectedDoor","revealedDoor","userWon","userSelectedFinal","renderDoors","map","door","Col","xs","Components_Door_Door","userSelection","refreshPage","prevState","_this3","Container","align","Row","revealDoor","xg","style","fontSize","changeChoice","declareResult","App","Components_GamePage_GamePage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e8173ec.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Door.css\";\r\n\r\nclass Door extends React.Component {\r\n    state = {\r\n        id: this.props.id,\r\n        prize: this.props.prize,\r\n        colourSelectedDoor: false,\r\n    }\r\n\r\n    selectDoor() {\r\n        if (this.props.selectedDoor) {\r\n            this.props.selectedDoor(this.props.id);\r\n            this.setState({colourSelectedDoor: true})\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"door\" onClick={() => this.selectDoor(this.props.selectedDoor)}>\r\n                <br />\r\n                <h3>{this.props.id}</h3>\r\n                <div className=\"knob\" />\r\n\r\n                {this.state.colourSelectedDoor&& <div><h2>Selected</h2></div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Door;\r\n","import React from \"react\";\r\nimport Door from \"../Door/Door\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./GamePage.css\";\r\n\r\nclass GamePage extends React.Component {\r\n  shuffleArray = (arr = [\"Car\", \"Goat\", \"Goat\"]) => {\r\n    var ctr = arr.length,\r\n      temp,\r\n      index;\r\n\r\n    while (ctr > 0) {\r\n      index = Math.floor(Math.random() * ctr);\r\n      ctr--;\r\n      temp = arr[ctr];\r\n      arr[ctr] = arr[index];\r\n      arr[index] = temp;\r\n    }\r\n    return arr;\r\n    // console.log(arr)\r\n  };\r\n  state = {\r\n    //  Set to false before deployment ------------->>>>>>>>>>>>>>>>>>>>>>>\r\n    isPlayClicked: false,\r\n    doors: [\"A\", \"B\", \"C\"],\r\n    prizes: this.shuffleArray(),\r\n    userSelectedDoor: null,\r\n    revealedDoor: null,\r\n    userWon: null,\r\n    userSelectedFinal: null\r\n  };\r\n\r\n  renderDoors = () => {\r\n    return this.state.doors.map(door => (\r\n      <Col xs={4}>\r\n        <Door\r\n          id={door}\r\n          selectedDoor={\r\n            !this.state.userSelectedDoor && (id => this.userSelection(id))\r\n          }\r\n        />\r\n      </Col>\r\n    ));\r\n  };\r\n\r\n  userSelection(id) {\r\n    this.setState({ userSelectedDoor: id });\r\n    if (this.state.userSelectedDoor) {\r\n    }\r\n  }\r\n\r\n  revealDoor() {\r\n    var userSelectedDoor = this.state.userSelectedDoor;\r\n    var prizes = this.state.prizes;\r\n    var id =\r\n      userSelectedDoor === \"A\"\r\n        ? prizes[1] === \"Goat\" && prizes[2] === \"Goat\"\r\n          ? [\"B\", \"C\"][Math.floor(Math.random() * [\"B\", \"C\"].length)]\r\n          : prizes[1] === \"Goat\"\r\n            ? \"B\"\r\n            : prizes[2] === \"Goat\"\r\n              ? \"C\"\r\n              : null\r\n        : userSelectedDoor === \"B\"\r\n          ? prizes[0] === \"Goat\" && prizes[2] === \"Goat\"\r\n            ? [\"A\", \"C\"][Math.floor(Math.random() * [\"A\", \"C\"].length)]\r\n            : prizes[0] === \"Goat\"\r\n              ? \"A\"\r\n              : prizes[2] === \"Goat\"\r\n                ? \"C\"\r\n                : null\r\n          : userSelectedDoor === \"C\"\r\n            ? prizes[0] === \"Goat\" && prizes[1] === \"Goat\"\r\n              ? [\"A\", \"B\"][Math.floor(Math.random() * [\"A\", \"B\"].length)]\r\n              : prizes[0] === \"Goat\"\r\n                ? \"A\"\r\n                : prizes[0] === \"Goat\"\r\n                  ? \"B\"\r\n                  : null\r\n            : null;\r\n    this.state.revealedDoor = id;\r\n    return <h2>Door {id} has a goat behind it</h2>;\r\n  }\r\n\r\n  changeChoice() {\r\n    this.setState(prevState => ({\r\n      userSelectedFinal:\r\n        prevState.userSelectedDoor === \"A\" && this.state.revealedDoor === \"B\"\r\n          ? \"C\"\r\n          : prevState.userSelectedDoor === \"A\" &&\r\n            this.state.revealedDoor === \"C\"\r\n            ? \"B\"\r\n            : prevState.userSelectedDoor === \"B\" &&\r\n              this.state.revealedDoor === \"A\"\r\n              ? \"C\"\r\n              : prevState.userSelectedDoor === \"B\" &&\r\n                this.state.revealedDoor === \"C\"\r\n                ? \"A\"\r\n                : prevState.userSelectedDoor === \"C\" &&\r\n                  this.state.revealedDoor === \"A\"\r\n                  ? \"B\"\r\n                  : prevState.userSelectedDoor === \"C\" &&\r\n                    this.state.revealedDoor === \"B\"\r\n                    ? \"A\"\r\n                    : null\r\n    }));\r\n  }\r\n\r\n  declareResult() {\r\n    this.state.userSelectedFinal != null &&\r\n      (this.state.userSelectedFinal === \"A\" && this.state.prizes[0] === \"Car\"\r\n        ? (this.state.userWon = true)\r\n        : this.state.userSelectedFinal === \"B\" && this.state.prizes[1] === \"Car\"\r\n          ? (this.state.userWon = true)\r\n          : this.state.userSelectedFinal === \"C\" && this.state.prizes[2] === \"Car\"\r\n            ? (this.state.userWon = true)\r\n            : (this.state.userWon = false));\r\n\r\n    var result = this.state.userWon && this.state.userWon === true ? (\r\n      <h2>You won</h2>\r\n    ) : this.state.userWon === false ? (\r\n      <h2>You Lost</h2>\r\n    ) : null;\r\n\r\n    return result;\r\n  }\r\n\r\n  refreshPage = () => {\r\n    this.setState({\r\n      //  Set to false before deployment ------------->>>>>>>>>>>>>>>>>>>>>>>\r\n      isPlayClicked: false,\r\n      doors: [\"A\", \"B\", \"C\"],\r\n      prizes: this.shuffleArray(),\r\n      userSelectedDoor: null,\r\n      revealedDoor: null,\r\n      userWon: null,\r\n      userSelectedFinal: null\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.isPlayClicked === false ? (\r\n          <button\r\n            className=\"button\"\r\n            onClick={() => this.setState({ isPlayClicked: true })}\r\n          >\r\n            <span>Play</span>\r\n          </button>\r\n        ) : (\r\n            <div>\r\n              Game has started\r\n            <br />\r\n              <br />\r\n              <Container align=\"center\">\r\n                <Row>{this.renderDoors()}</Row>\r\n                <br />\r\n                {this.state.userSelectedDoor && !this.state.userSelectedFinal && (\r\n                  <div>\r\n                    <h4>\r\n                      Now I would like to reveal one door which has a goat behind\r\n                      it\r\n                  </h4>\r\n                    {this.revealDoor()}\r\n                    <h4>Do you want to change your choice to the other door</h4>\r\n                    <Row>\r\n                      <Col xg={6}>\r\n                        <button\r\n                          className=\"button\"\r\n                          style={{ fontSize: \"30px\" }}\r\n                          onClick={() => this.changeChoice()}\r\n                        >\r\n                          <span>Yes</span>\r\n                        </button>\r\n                      </Col>\r\n                      <Col xg={6}>\r\n                        <button\r\n                          className=\"button\"\r\n                          style={{ fontSize: \"30px\" }}\r\n                          onClick={() =>\r\n                            this.setState({\r\n                              userSelectedFinal: this.state.userSelectedDoor\r\n                            })\r\n                          }\r\n                        >\r\n                          <span>No Way _|_</span>\r\n                        </button>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                )}\r\n                {this.declareResult()}\r\n                {this.state.userWon != null && <button className=\"button\" onClick={() => { this.refreshPage() }}><span>Play Again</span></button>}\r\n\r\n              </Container>\r\n            </div>\r\n          )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GamePage;\r\n","import React, { Component } from \"react\";\nimport GamePage from \"./Components/GamePage/GamePage\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"text-center\">\n        <h1>Monty Hall Game</h1>\n        <br />\n        <GamePage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}